// Composite Pattern - Complete Implementation
// This file contains all classes and interface for the Composite pattern example

// Interface for renderable objects
interface Renderable {
    void render();
}

// Leaf class - individual shape
class Shape implements Renderable {
    public void render() {
        System.out.println("Rendering shape");
    }
}

// Composite class - group of renderable objects
class Group implements Renderable {
    private java.util.List<Renderable> objects = new java.util.ArrayList<>();

    public void add(Renderable object) {
        objects.add(object);
    }

    public void render() {
        for (var object : objects) {  
            object.render();
        }
    }
}

// Main class with example usage
public class CompositePatternComplete {
    public static void main(String[] args) {
        var group1 = new Group();
        group1.add(new Shape());
        group1.add(new Shape());
        group1.render();

        var group2 = new Group();
        group2.add(new Shape());
        group2.render();

        var group3 = new Group();
        group3.add(group1);
        group3.add(group2);
        group3.render();
    }
}
